using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using UnityEngine.UI;
using UnityEngine;
using System.Linq;

public class TextPickerManager
{

    public static string DBString = "DEVOID,THING,AVERAGE,HEARING,CHANNEL,OBEY,RUST,SERVANT,JAR,CHROMATIC,BOUNCY,FOUL,ALLOTMENT,BUMPER,AFFAIR,MUTATION,APPARENTLY,ROT,GROOVE,BUG,FAITHLESS,HAPPY,FLY,HEAVENLY,BIBLICAL,SCREAM,COMPUTATION,FOREST,DUMP,GULF,BIZARRE,DAYTIME,TIME,DISCHARGE,IMMUNITY,BETRAY,PERFECT,DESCRIPTION,FOGGY,BLISS,GOON,CHALLENGE,LUMINOUS,NIGHTMARE,BLUEBERRY,DIGITAL,GARGANTUAN,SAVAGE,BET,BIRTHDAY,ALTERNATE,ANTELOPES,GLUTTONOUS,FACTUAL,HOOFS,APRICOT,DEPLORABLE,IDENTITY,FEUDAL,MARTYR,PREFAB,BINOCULAR,ANATOMY,HOGWASH,FORNICATOR,BELLYBUTTON,DROWNED,BAFFLING,EXCESSIVE,PROPHETS,ABSOLUTION,IGUANA,DREAMLAND,COMMUNICATION,DIAMOND,WILDERNESS,MUSCLEMAN,BILLIONAIRE,WARTIME,ENDLESS,FIERY,PARACHUTE,ANNUAL,EARLY,DISTRICT,PIG,LIQUOR,MURDEROUS,UNLIVING,KITTEN,HEARTBEAT,REPEAT,HIT,PREDICTION,DINNER,BURGLARY,FEDERATION,WET,MISTAKEN,BELLYBUTTON,CARDINAL,HOLES,ABNORMALITY,TOP,EIGHT,WATER,DUAL,LOSER,CLUB,EGOCENTRIC,NASTY,HUSH,DUST,FASHIONABLE,CUTENESS,FOUNDATION,BLASTER,GROUP,FINISH,GRANITE,WEARABLE,RELEARN,BAYONET,HARD,CONSPIRACY,GUTTER,BELL,BLIP,NECK,ETHER,STICKY,JOYRIDE,FETISH,HUNGRY,POWERFUL,HEAD,SEXIEST,FLOPPY,SHAG,CELEBRITY,PARADISE,MORBID,AFTERWARDS,INFINITE,SANITARY,FIST,PARALLEL,ELEMENT,HEARSE,RAINFALL,CANNIBALISM,POWDER,PLANET,RAVEN,HOOK,EXQUISITE,HORROR,EXCUSE,CURFEW,EXQUISITE,ELEGANT,PIGSTICKER,HOOFS,ENFORCER,COUCH,ETERNAL,HOMESICK,BINDING,PROCESS,SWEET,BOOZE,BANK,BIPLANE,OBJECT,BEWITCHING,BECAME,LADY,GUILT,DOSAGE,ENTITY,CARNIES,ABSORB,MILITARY,DISTURBANCE,CELEBRATION,GEMS,DORMANT,HOTTER,HOROSCOPE,SEVERE,BENEFIT,BIGHEAD,BEDTIME,EIGHT,BURN,DIAGONAL,DOWNWARD,DRAMA,HORRIBLE,ABATTOIR,CUT,AMBUSH,ANALYST,LONELINESS,ABNORMALITY,ENFORCER,EXORCISM,CAREGIVER,AMBIDEXTROUS,IVY,CRUMPLY,LEATHER,CINDER,FORTY,GRAFFITI,GUTSY,GENERAL,DISASTER,LEGEND,CLEAR,PREDICT,HEAVENLY,DEFINITIVE,LUXURY,LUMINOUS,GIGANTIC,PIPE,FORLORNNESS,BOX,HIDDEN,AMPLITUDE,PERCEPTION,BUCKET,ANNUAL,LANDSCAPE,DECAY,FRAUD,KICK,CARIBOU,ADRENALINE,HORRORS,ADVENTURE,ORTHODOX,BELONG,CORROSION,EAT,HOAX,HUMP,FUNNEL,DOG,HANGMAN,HELP,TEEN,MASSACRE,STATE,MORBID,BAT,IMPRINT,HAWK,DESOLATE,HOPELESS,MUSHROOM,BIRTHDAY,MISSHAPEN,MESSIAH,HYAENA,SUAVE,FAINT,JUNK,ASHES,LONG,APPROXIMATION,PERILOUS,CASINO,FOAM,EUNUCH,BLABBERMOUTH,DYNAMITE,PURE,PRIVATE,FAST,BEGINNING,HARMONY,MUTAGEN,ADHERENCE,AUTOPILOT,IMPRINT,PERCUSSIVE,BAKE,HOPPER,GLOW,FRUSTRATION,WORLD,VIRGIN,CORPORATION,COMPULSIVE,BELIEVABLE,PROTEST,LARGEST,CAPTURED,FRYING,FLAVORING,CRAWL,HORMONAL,HEARTS,SOLITARY,CURFEW,RASTLED,PROFOUND,SYMBOLIC,BLINDNESS,BRASS,ESSENTIAL,ANALYSIS,EXCELLENT,ENERGY,BLOCKHEAD,BERSERK,CEREMONY,HOOVES,CONTROVERSIAL,APPARATUS,STEALTHY,MAJOR,UPRISING,FIGUREHEAD,CRUISE,BOARDROOM,SACRED,MENTAL,DELICIOUS,SAINT,HANGAR,AGAIN,HAIRLESS,BLURRY,GREASY,AMOEBIC,BLADDER,BOULEVARD,SPARROW,PROPAGANDA,SIDEWAYS,CONQUEROR,GASMASK,BIGGEST,HANGOVER,AMPUTATE,HONORARY,BELL,EAR,PORTAL,EXACT,APPEARANCE,BARS,EXCEPTION,LOVESICK,BLINDFOLD,ASHES,GRAPPLER,JAR,BOOZE,HEADACHE,HAIRY,CRUELTY,AMBULATORY,PICTORIAL,GRAVITATIONAL,GUNS,PICNIC,LINEAR,ARTIFICIAL,COMPANY,HELICOPTER,DUSK,BLUSH,SKYLINE,HIVE,ANALYSIS,EVERY,BULLWHIP,EXPOSITION,GLOOMY,HAZY,FINCH,BALLROOM,JOYPOP,MISTAKEN,HOMEMADE,CHURCH,HOLD,ENDLESS,EGO,BULLDOZER,GOON,HINGE,ATTACKING,COASTAL,CONVERTIBLE,BARS,GREY,TRUTH,TIN,STUN,PASTORAL,ALARM,BODIES,APPEAR,NOMADIC,HANGAR,WESTWORK,BLOODSTREAM,PSYCHO,BEASTLY,NORM,BEWITCHING,BOVINE,TRAUMA,EVECTIONAL,ADAPTIVE,PIN,WEAPON,DIPLOMACY,GROAN,LASSO,WISE,DIVA,ASSEMBLY,COLORS,WHALES,SYMBOLIC,TASTE,FRIEND,BLOODSUCKER,FORNICATOR,AMBULATORY,CARRIAGE,EYES,GRAPPLER,MARY,EXPLICIT,DISSOLVE,MUSCLEMAN,WITCH,RECENT,DOWN,AUTHORITY,DEVOID,POISONER,PANDEMIC,GRIM,NATIONAL,PHENOMENAL,FUZZ,BROTHER,FRAUDULENT,FEET,BELLYBUTTON,DEPARTMENT,AMBIVALENT,SHARP,SUCKLE,MOHAWK,BLUE,BAZOOKA,AFTERTASTE,STEALTHY,CARNAL,GOODBYE,GAUNT,LONELINESS,ETHER,BLEEDER,GRIPPING,HISTORIC,OPTIONAL,ISLAMISM,HOMELAND,CRYPT,COTTAGE,SACRED,HUG,LOVESICK,DANGEROUS,ATROCITIES,RIOT,WISH,MUZZLE,FLUENT,FAMILY,MUTATION,BRUTE,DISK,GENERAL,AIRSHIP,BUBBLE,DOBERMAN,BLINK,RESEARCH,TEEN,POETRY,ASTOUNDING,EIGHT,EASY,QUANTUM,FEARSOME,COMMITTEE,FORGERY,HUG,MIGHTIEST,DOUBLE,ANYWAYS,PROGRAM,LUMP,FLAT,MURKY,PERFUME,FRACTION,FLINCH,FLAWLESS,COCOON,MISSHAPEN,CHOKER,CRAWLING,WISE,ATROCITY,GUM,REGIONAL,BACHELOR,CHECKPOINT,GROWL,FELT,COTTAGE,SLEEP,DISCORD,CONTROVERSIAL,COMPOUND,ALMOST,ARCHITECT,SHAMAN,STATION,HANGAR,ACCIDENT,ALWAYS,DEMONSTRATION,CHOKER,ACHE,GAMBLE,AFTERNOON,CONFIDENCE,ENERGY,LIBERATING,DECIPHERER,DOLPHINS,DEFINITIVE,BANK,PITCH,BARS,FORTUNETELLER,PARADE,HUNT,BOAST,BEHIND,INVISIBLE,ENZYME,SUBWAY,BUNNY,EARLY,SMILE,HUNGER,BLEMISH,FISTFIGHT,STALLION,SEDUCER,DEVOUT,HEAT,FEAR,DRONE,DIRECT,CLAY,HOMEWARDS,ANDROGYNOUS,ELIMINATE,GREED,EFFECTIVE,FISH,DINNER,DEEP,NUMBSKULL,DELICIOUS,RECORD,DEGRADER,AXE,CONFIDENT,DAYLIGHT,DEBAUCHERY,OX,OPERATIC,COUGAR,BEATEN,LONESOME,ENCRYPTION,EXTREME,SWOLLEN,ACUTE,LEVITATING,DRUM,PIECE,MAGNIFICENT,COCONUT,FLASH,CONDEMN,GRINNING,MEMORY,GRAPE,STEEL,GLOW,EYE,CONFIDENTIAL,ORDEAL,ESCAPIST,CRASHER,ELITE,PRIME,BEACON,COMMITTEE,AMOEBIC,ENFORCER,FACTORY,HELP,GROUNDS,HARPLIKE,ANCESTOR,CABLE,ENLIGHTEN,INSANITY,CHOKER,NEON,ADOPTION,SPRITES,PARROT,GLOSSY,FANATICAL,CONTROL,TWISTED,MYTHICAL,BLANKNESS,LEGEND,DEMONSTRATION,ABOVE,GAMBLE,RATTLE,MURDEROUS,HONEY,LIBERAL,ANXIOUS,GETAWAY,BETWEEN,DISASTER,DYNASTY,HARD,LIMITLESS,FUNDAMENTAL,JOYRIDE,HYPNOTIC,BEWITCHING,DOSAGE,HOPELESS,JAGGED,CONCEPT,ELECTRIC,EXCEPTION,PRIMITIVE,TONGUE,ALCOHOLIC,BLUEPRINT,RUST,POCKET,GURGLING,GATEWAY,LEVEL,HEAD,NECK,FESTIVAL,CREEP,FLATTEN,FAT,STONE,PASTE,TRUE,BOARDROOM,HAPPINESS,MYSTERY,WARM,OMNIVORE,HEAVYSET,HONESTY,MARY,BLISSFULLY,TIMELESS,REAR,CLOCK,DENSE,HEARTBEAT,CONSPIRACY,REVOLT,HINGE,GATEWAY,CAPTURE,INITIAL,BASE,ANTIQUE,EXTERNAL,ORPHAN,CHIEF,HOOFS,HOSPITAL,NEGATIVE,FIERY,CONNECTEDNESS,ABATTOIR,CIVILIZATION,AMBIDEXTROUS,FUNNEL,BREAKABLE,FUZZ,HEADACHE,AWKWARD,VAMPIRE,SCANNER,ADJUSTABLE,CONNECTEDNESS,BURIED,FLY,BLAME,DOCTOR,FORTUNETELLER,NOISE,NOBLE,ABSTINENT,ANTELOPES,STICKY,PINK,HIBERNATION,HISS,ORANGE,GRIP,ETERNITY,CRAFTY,GURGLE,FEET,HAUNTING,ALWAYS,AMNESIA,DYNAMITE,POOR,NEUROTIC,WEASEL,FLATNESS,ZERO,EXAMINER,DOBERMAN,NOISE,INDUSTRIAL,FREEZING,ABSORB,RECLUSE,ASSEMBLY,POOR,BUILDING,BLACKNESS,RABBIT,MEDICINE,CLOTH,PERFUME,COLLARBONE,DRAMA,CRIMSON,BEAUTY,HEALTHY,FLIRT,AWAKENING,BELONG,CROCODILE,GRIT,BANANAS,DISEASE,HAZY,HOTEL,FANG,GREED,CONCERT,HOMESICK,MARTINI,SORROW,CLAIRVOYANT,PILLBOX,AXIS,THUMB,HANDLEBARS,HALLUCINATION,FRAUD,TRAP,HONEY,EXPOSITION,DOWNTOWN,BARBER,AMPLITUDE,DISCIPLE,REPTILE,VOLUME,PRESIDENT,LEATHER,AWAKENING,HONEYBEE,PROPOSAL,WITCH,HORIZONTAL,GROUND,COMMAND,FACTORY,FAIRYTALE,POETIC,TOY,WITNESS,VILLAIN,BREAKWATER,SWEAT,WISE,CLAW,FLESH,CRITICAL,COMPANY,DOMINO,HALFWAY,COERCION,HORSES,CRUEL,GHOULISH,BASTER,BULGING,HORIZON,NIGHTFALL,SIDESHOW,FRONTIER,BRUTALLY,COMPANION,POWER,HONEYPOT,HEADACHE,AGGRESSION,BOUNCY,PINK,BLAST,BATCH,BANDSAW,AMBUSH,KING,FACTORY,POET,OX,MYSTICAL,FORCE,PULL,OVERT,COMMUNICATION,CLIMAX,BLOODSUCKER,REVERSAL,HIDDEN,ACADEMY,FELON,TWISTED,FORLORNNESS,DEATHTRAP,DIRT,MOUNTAIN,BEAT,CLASSIC,AMPUTATE,BEACON,DEER,COLA,SONIC,HEARING,HAYWIRE,TOY,AERIAL,LUMINOUS,SOUL,HONEYDEW,EPHEMERAL,DEBATE,BASELINE,BURNING,GRENADE,GURGLE,INJURY,EXCUSE,BAUBLE,POET,APPEARANCE,FATHEAD,HACK,HORRIFIC,HOAX,COMBUSTIBLE,ARCH,CONTORTIONIST,CHEERFUL,FIRM,DILEMMA,HANDLER,DRAMATIC,FLAMETHROWER,ART,EROTICA,JERID,BLUBBER,HOMESICK,AMNESIA,CRUEL,HUMANLIKE,OBSESSION,GUILT,AMAZEMENT,GUIDE,GOODBYE,ARMS,RESEARCH,CHARGEABLE,OFFICIAL,HEAVIEST,CONVULSION,CARESS,HAWK,BAD,NEBULA,PICK,BALLERINA,CENTURY,EQUATION,CONFUSE,PRESERVE,LADY,EXCEPTION,DISEASE,BLOWTORCH,BALLET,PAINKILLER,HELL,FORTRESS,ACCURACY,BACHELOR,DETAINEE,FURRY,BLUSH,REVERSE,INFINITE,POISON,CHEWABLE,COMPUTATION,RECORD,FIZZ,DUST,LEATHER,LADY,DADDY,PLAID,COMMAND,SPIKE,SILVER,OX,BALCONY,AMBER,AGONIZING,BLOB,FRONTIER,EXECUTIVE,FILTHY,COLONY,DEMOCRACY,EYETOOTH,HOSTAGE,FORGERY,RIPE,HEAVY,DIGNITARY,TERRIFIC,UNDER,BOUNCE,BASH,REBEL,ATTACK,APPLICATION,HERITAGE,TRUTH,UNDER,DRONE,JUICE,";
    public List<string> WordList;
    private int currentWordIndex = 0;
    private Text currentWord;
    private int currentWordLength;
    private Text nextWord;
    public Text letterDestroyed;

    private int currentCharIndex = 0;
    public string currentChar;
    private string nextChar;
    public GameObject destroyerPrefab;

    //public GameObject inputField;
    //public GameObject textDisplay;

    public GameObject nextWordDisplay;
    public GameObject wordDisplay;
    public GameObject letterDestroyer;

    public GameObject wordPanel;

    public RectTransform destroyerOriginTransform;

    public TextPickerManager()
    {
        WordList = DBString.Split(',').ToList();
        for (int i = 0; i < WordList.Count; i++)
        {
            string temp = WordList[i];
            int randomIndex = Random.Range(i, WordList.Count);
            WordList[i] = WordList[randomIndex];
            WordList[randomIndex] = temp;
        }
        /*WordList.Add("lorem");
        WordList.Add("ipsum");
        WordList.Add("dolor");
        WordList.Add("sit");
        WordList.Add("amet");*/

        currentWordLength = WordList[currentWordIndex].Length;
        
        currentChar = WordList[currentWordIndex].Substring(currentCharIndex, 1);

        destroyerPrefab = Resources.Load<GameObject>("LetterDestroyer");
        wordDisplay = GameObject.Find("WordDisplay");
        nextWordDisplay = GameObject.Find("NextWordDisplay");
        letterDestroyer = GameObject.Find("LetterDestroyer");

        wordPanel = GameObject.Find("WordPanel");
        destroyerOriginTransform = GameObject.Find("destroyerTransform").GetComponent<RectTransform>();

        currentWord = wordDisplay.GetComponent<Text>();
        nextWord = nextWordDisplay.GetComponent<Text>();
        letterDestroyed = letterDestroyer.GetComponent<Text>();
        
        currentWord.text = WordList[currentWordIndex];
        nextWord.text = WordList[currentWordIndex + 1];

        FragmentWord();

        //inputField = GameObject.Find("InputField");
        //textDisplay = GameObject.Find("TextDisplay");
        //GameManager.GameUpdate += Update;
        //string playerInput = textDisplay.GetComponent<Text>().text;
        //playerInput = ">  " + playerInput + "  <";
        //GameManager.singleton.TextPickerManager.inputStore();
    }

    public void GetNextChar()
    {
        
        if (currentCharIndex < WordList[currentWordIndex].Length - 1)
        {
            //Debug.Log("CurrentWordLength: " + WordList[currentWordIndex].Length);
            RemoveChar();
            currentCharIndex++;
            currentChar = WordList[currentWordIndex].Substring(currentCharIndex, 1);
            
        }
        else if(currentCharIndex == WordList[currentWordIndex].Length - 1)//le mot est terminé
        {
            Debug.Log("hat dayum");
            GameManager.singleton.StartCoroutine(ZoomInFadeOut(letterDestroyed?.gameObject));
            //letterDestroyer. currentWord.text
            letterDestroyed.text = letterDestroyed.text.Remove(0, 1);
            ChangeWord();
            
        }

       
/*        Debug.Log(currentChar);
        Debug.Log(currentCharIndex);*/
    }

   /* public void ColorizeCharGreen()
    {
        currentWord.text = currentWord.text.Replace(currentWord.text[currentCharIndex].ToString(), "<color=#32a852>" + currentWord.text[currentCharIndex].ToString() + "</color>");

    }*/

    public void FragmentWord()
    {

        letterDestroyed.text = currentWord.text[0].ToString();
        currentWord.text = currentWord.text.Remove(0, 1);
        //Debug.Log("New Destroyed Letter: "+currentWord.text[0].ToString());
    }

    IEnumerator ZoomInFadeOut(GameObject instance)
    {
        Vector3 target = instance.transform.localScale * 2.0f;
        float ratio = 0;
        float speed = 1.0f;
        Color targetColor = new Color(0, 0, 0, 0);

        while ((instance.transform.localScale != target) || (instance.GetComponent<Text>().color != targetColor))
        {
            instance.transform.localScale = Vector3.Lerp(instance.transform.localScale, target, ratio+=Time.deltaTime/2f * speed);
            instance.transform.GetComponent<Text>().color = Color.Lerp(instance.transform.GetComponent<Text>().color, targetColor, ratio);
            yield return 0;
        }
        GameManager.Destroy(instance);
    }

    public void RemoveChar()
    {
        GameManager.singleton.StartCoroutine(ZoomInFadeOut(letterDestroyed?.gameObject));
        //letterDestroyer. currentWord.text
        letterDestroyed.text = letterDestroyed.text.Remove(0, 1);
        InstantiateNewLetterDestroyer();
        FragmentWord();

    }

    public void InstantiateNewLetterDestroyer()
    {
        GameObject newDestroyedLetter = GameObject.Instantiate(destroyerPrefab, Vector3.zero, Quaternion.identity);
        newDestroyedLetter.GetComponent<RectTransform>().position = destroyerOriginTransform.position;
        newDestroyedLetter.transform.parent = wordPanel.transform;
        newDestroyedLetter.GetComponent<Text>().text = currentChar;
        letterDestroyed = newDestroyedLetter.GetComponent<Text>();
    }

    public void ChangeWord()
    {
        if(currentWordIndex <= WordList.Count-1)
        {
            currentCharIndex = 0;
           
            currentWordIndex++;
            currentChar = WordList[currentWordIndex].Substring(currentCharIndex, 1);
            currentWord.text = WordList[currentWordIndex];
            if(currentWordIndex+1 <= WordList.Count-1)
                nextWord.text = WordList[currentWordIndex + 1];
            else
            {
                nextWord.text = string.Empty;
            }
            InstantiateNewLetterDestroyer();
            FragmentWord();
        }
        
    }
    /*public void inputStore()
    {


    }*/

    /*void Update()
    {
        string playerInput = textDisplay.GetComponent<Text>().text;
        playerInput = ">  " + playerInput + "  <";
    }*/
    // Update is called once per frame

}
